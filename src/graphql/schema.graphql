directive @AuthDirective on QUERY | FIELD_DEFINITION | FIELD


type Genre {
  _id: ID
  title: String
  description: String
}
input GenreInput {
  title: String
  description: String 
}

type Category {
  _id: ID
  title: String
  description: String
}
input CategoryInput {
  title: String
  description: String 
}

type Tag {
  _id: ID
  title: String
  description: String
}
input TagInput {
  title: String
  description: String 
}


type Content {
  _id: ID!
  title: String!
  description: String!
  releaseDate: String!
  imgHero: String!
  clasaification: String
  overViewLink: String
  genres: [Genre]
  medias: [Media]
  tags: [Tag]
  categories: [Category]
}
input ContentInput {
  title: String
  description: String
  releaseDate: String
  imgHero: Upload
  genres: String
  clasaification: String
  overViewLink: Upload
}

type Media {
  _id: ID
  title: String
  description: String
  releaseDate: String
  season: String
  chapter: String
  order: Int
  contentID: String
  mediaLink: String
}
input MediaInput {
  title: String
  description: String
  releaseDate: String
  season: String
  chapter: String
  order: Int
  contentID: String
  mediaLink: Upload
}


enum Gender {
    Hombre
    Mujer
}
type Token {
    token: String
}
type User {
    _id: ID
    name: String
    lastName: String
    email: String
    password: String
    gender: Gender
    profileImage: String
}
input UserInput {
    name: String
    lastName: String
    email: String
    password: String
    gender: Gender
    profileImage: Upload
}


type Subscription {
    tagAdded: Tag
}

# (A "Mutation" type will be covered later on.)
type Mutation {
  "Add genre"
  addGenre(data: GenreInput) : Genre
  "Add genre to a content"
  addGenreToContet(contentID: ID!, genreID: ID!): Content
  
	addTag(data: TagInput) : Tag
	updateTag(data: TagInput, tagID: ID) : Tag
  deleteTag(tagID: ID) : Tag

	addContent(data: ContentInput) : Content
	updateContent(data: ContentInput, contentID: ID) : Content

  addMedia(data: MediaInput) : Media
	addCategory(data: CategoryInput) : Category
	addUser(data: UserInput) : Token
	doLogin(email: String, password: String) : Token
}

# The "Query" type is the root of all GraphQL queries.
type Query {
	
  getGenres: [Genre]

  getTags: [Tag] @AuthDirective
  
  getMedias: [Media] @AuthDirective
  getMedia(mediaID: ID): Media @AuthDirective
  
  getContents: [Content] @AuthDirective
  getContent(contentID: ID): Content @AuthDirective

  getCategories: [Category] @AuthDirective
}